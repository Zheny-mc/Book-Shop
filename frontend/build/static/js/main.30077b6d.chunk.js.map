{"version":3,"sources":["AppNavbar.js","Home.js","ClientList.js","ClientEdit.js","App.js","reportWebVitals.js","index.js"],"names":["AppNavbar","props","state","isOpen","toggle","bind","this","setState","Navbar","color","dark","expand","NavbarBrand","tag","Link","to","Component","Home","Container","fluid","Button","ClientList","clients","remove","fetch","then","response","json","data","id","a","method","headers","updatedClients","filter","i","clientList","map","client","style","whiteSpace","name","email","ButtonGroup","size","onClick","className","Table","width","ClientEdit","emptyItem","item","handleChange","handleSubmit","match","params","event","target","value","preventDefault","body","JSON","stringify","history","push","title","Form","onSubmit","FormGroup","Label","for","Input","type","onChange","autoComplete","withRouter","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30077b6d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Navbar, NavbarBrand} from 'reactstrap';\nimport {Link} from 'react-router-dom';\n\nexport default class AppNavbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {isOpen: false};\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\n        </Navbar>;\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\nimport { Button, Container } from 'reactstrap';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <Button color=\"link\"><Link to=\"/clients\">Clients</Link></Button>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\n\nclass ClientList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {clients: []};\n        this.remove = this.remove.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('/clients')\n            .then(response => response.json())\n            .then(data => this.setState({clients: data}));\n    }\n\n    async remove(id) {\n        await fetch(`/clients/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(() => {\n            let updatedClients = [...this.state.clients].filter(i => i.id !== id);\n            this.setState({clients: updatedClients});\n        });\n    }\n\n    render() {\n        const {clients} = this.state;\n\n        const clientList = clients.map(client => {\n            return <tr key={client.id}>\n                <td style={{whiteSpace: 'nowrap'}}>{client.name}</td>\n                <td>{client.email}</td>\n                <td>\n                    <ButtonGroup>\n                        <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/clients/\" + client.id}>Edit</Button>\n                        <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(client.id)}>Delete</Button>\n                    </ButtonGroup>\n                </td>\n            </tr>\n        });\n\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <div className=\"float-right\">\n                        <Button color=\"success\" tag={Link} to=\"/clients/new\">Add Client</Button>\n                    </div>\n                    <h3>Clients</h3>\n                    <Table className=\"mt-4\">\n                        <thead>\n                        <tr>\n                            <th width=\"30%\">Name</th>\n                            <th width=\"30%\">Email</th>\n                            <th width=\"40%\">Actions</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {clientList}\n                        </tbody>\n                    </Table>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default ClientList;","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\n\nclass ClientEdit extends Component {\n\n    emptyItem = {\n        name: '',\n        email: ''\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: this.emptyItem\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.id !== 'new') {\n            const client = await (await fetch(`/clients/${this.props.match.params.id}`)).json();\n            this.setState({item: client});\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        item[name] = value;\n        this.setState({item});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        const {item} = this.state;\n\n        await fetch('/clients' + (item.id ? '/' + item.id : ''), {\n            method: (item.id) ? 'PUT' : 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item),\n        });\n        this.props.history.push('/clients');\n    }\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{item.id ? 'Edit Client' : 'Add Client'}</h2>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"name\">Name</Label>\n                        <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\n                               onChange={this.handleChange} autoComplete=\"name\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"email\">Email</Label>\n                        <Input type=\"text\" name=\"email\" id=\"email\" value={item.email || ''}\n                               onChange={this.handleChange} autoComplete=\"email\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                        <Button color=\"secondary\" tag={Link} to=\"/clients\">Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\nexport default withRouter(ClientEdit);","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport ClientList from './ClientList';\nimport ClientEdit from \"./ClientEdit\";\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path='/' exact={true} component={Home}/>\n                    <Route path='/clients' exact={true} component={ClientList}/>\n                    <Route path='/clients/:id' component={ClientEdit}/>\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}